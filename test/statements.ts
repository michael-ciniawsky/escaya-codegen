import * as t from 'assert';
import { parseScript } from 'escaya';
import { generate } from '../src/escaya-codegen';

describe('Statements', () => {
  for (const arg of [
    // Blockstatement
    '{}',
    '{{}}',
    '{a:{}}',
    '{a ? b : c}',
    '{a;b}',
    '{a\nb\n}',
    '{ function f() {} ; function f() {} }',
    '{ function f(){} function f(){} }',
    // `{ let f = 123; if (false) ; else function f() {  } }`,
    `{ let x; } var x`,
    // `{ var f; var f; }`,
    `{ function a(){} function a(){} }`,
    `{ function* f() {} async function f() {} }`,
    `{ function let(){} }`,

    // BreakStatement

    'while(1)break',
    'while(1)break',
    // 'a:while(1){break;break a}', 'a:while(1){break;break a;}',
    'switch(1){case 1:break}',
    'switch(1){case 1:break;}',
    // 'while(1){break;break}', 'while(1){break;break;}',

    // ContinueStatement

    'while(1)continue',
    'while(1)continue',
    'while(1){continue;continue}',
    'while(1){continue;continue;}',
    'a:while(1){continue;continue a}',

    // DebuggerStatement
    'debugger',

    // DoWhileStatement

    // 'do;while(1)',
    // 'do debugger;while(1)'
    // 'do if(3){}while(1)',
    // 'do 3;while(1)', 'do(3);while(1)'
    // 'do x(); while (true);',
    // `do { var [[foo]=[42]] = [] } while (j)`,
    // '{ do { } while (false) false }',
    // 'do x();while (true)',
    // 'do {} while(x) x',

    // ExpressionStatement
    'a',
    '({a:3})',
    '(function(){})',
    '(class{})',
    'let',
    '(let[a])',
    '(let[a]++)',
    '(let[a]=0)',
    //'(let[a].b`c`||e?f:g)',
    // 'do({a:3},while(1)',
    '~{a:3}',
    '({a:3}+1)',
    'a:~{a:3}',
    '~function(){}',
    '~function(){}()',
    'function name(){}',

    // ForAwaitOf

    '(async function(){for await(a of b);}())',
    //'async function f() { let y; for await ({[Symbol.iterator]: a} of []); }',
    'async function * f() { "use strict"; for await\n({0: a} of []); }',
    'async function f() { for\nawait ({0: a} of [])  { } }',
    'async function * f() { for await({0: a} of []); }',
    // 'async function * f() { for await({a = 1} of []); }',
    //'async function f() { "use strict"; let y; for\nawait({a = 1} of []); }',
    //'async function f() { let y; for await ({a = 1} of []); }',
    'async function * f() { "use strict"; for await\n({a: a = 1} of []); }',
    'async function f() { for\nawait ({a: a = 1} of [])  { } }',
    'async function * f() { for await({a: a = 1} of []); }',
    'async function * f() { for await({[Symbol.iterator]: a = 1} of []); }',
    'async function fn() { for await ([...{ 0: x, length }] of [[]]) {} }',
    'async function fn() { for await ({} of [false]) {} }',
    'async function fn() { for await ({ w, x, y } of [{ x: 5 }]) {} }',
    'async function fn() { for await ({...src.y} of [{ x: 1, y: 2}]) {} }',
    'async function fn() { for await ({ x: { x = yield } } of [{ x: {} }]) {} }',
    'async function f() { for await ([a = 1] of []) ; }',
    'async function f() { for await ([a = 1, ...b] of []) ; }',
    'async function f() { for await ({a} of []) ; }',
    'async function f() { for await ([a] of []); }',
    'async function f(){ for await (x of y) {} }',
    'async () => { for await (x of y) {} }',
    'async function f() { "use strict"; for await\n(const {a: a = 1} of []) ; }',
    'async function f() { "use strict"; for await\n(const {a: a} of []) ; }',
    'async function f() { "use strict"; for await\n(const [a = 1, ...b] of []) ; }',
    'async function f() { "use strict"; for await\n(const [a = 1] of []) { } }',
    'async function *f() { "use strict"; for await\n(let {0: a = 1} of []) { } }',
    // 'async function f() { "use strict"; let y; for\nawait({[Symbol.iterator]: a = 1} of []); }',
    //'async function f() { let y; for await ({[Symbol.iterator]: a = 1} of []); }',
    'async function * f() { "use strict"; for await\n({0: a = 1} of []); }',
    'async function f() { for\nawait ({0: a = 1} of [])  { } }',
    'async function * f() { for await({0: a = 1} of []); }',
    'async function * f() { for await(var [a] of []); }',

    // ForOf

    'for([a]of[b]);',
    'for(let[a]of[b]);',
    'for((let)of b);',
    'for((let.a)of b);',
    'for((let[a])of b);',
    'for((let().a)of b);',
    'for((let``.a)of b);',
    'for((let.a)of b);',
    'for((let).a of b);',
    'for(a of(b,c));',

    // ForIn

    'for((b in b);;);',
    'for((b in b);b in b;b in b);',
    'for(var a=(b in b);b in b;b in b);',
    'for(var a=(b in b),c=(b in b);b in b;b in b);',
    'for (let a in b) {}',
    'for (let [a, b] in c) {}',
    'for (let {a, b} in c) {}',
    'for (let {a: b, c} in d) {}',
    'for (let a of b) {}',
    'for (var [a, b] of c) {}',
    'for (let {a, b} in c) {}',
    'for (let {a: b, c} in d) {}',
    'for (x in { x : { foo: foo().y } } = {});',
    'for (x in { x : { foo: foo()[y] } } = {});',
    'for (x in { x : { foo: y.z } } = {});',
    'for (x in { x : { foo: y[z] } } = {});',
    'for (yield in x);',
    'for (x in let) {}',
    'for (x in { x : [ y ] } = {});',
    'for (var {x, y = z} in obj);',
    'for (x in { x : [ foo().y ] } = {});',
    'for (x in { x : [ foo()[y] ] } = {});',
    'for (x in { x : [ y.z ] } = {});',
    'for (x in { x : [ y[z] ] } = {});',
    'for (x in { x : y = 10 } = {});',
    'for (x in { x : foo().y = 10 } = {});',
    `for ({a: b.c} in d) e`,
    `for ([a.b] of c) d`,
    `for (a in b=c);`,
    'for (x in { x : foo()[y] = 10 } = {});',
    'for (x in { x : y.z = 10 } = {});',
    'for (x in { x : y[z] = 10 } = {});',
    'for (x.y in { attr: null }) {}',
    'for ({}.x in y) {}',
    'for ([].bar in obj);',
    'for ((x) in { attr: null }) {}',
    'for (/foo/g[x] in c) d;',
    'for ("foo".x in y);',
    //'for (456..x in c) d;',
    'for ([x] in obj);',
    'for ((let)[x] in x);',
    'for ([x] = y;;);',
    'for (let[x] in x);',
    'for ((let)[x].foo in x);',
    'for (let [...foo] in obj);',
    'for (x in { x : { y = 10 } = {} } = {});',
    'for (x in { x : { foo: y = 10 } = {} } = {});',
    'for (x in { x : { foo: foo().y = 10 } = {} } = {});',
    'for (x in { x : { foo: foo()[y] = 10 } = {} } = {});',
    'for (x in { x : { foo: y.z = 10 } = {} } = {});',
    'for (x in [ { x : foo().y = 10 } = {} ] = z = {});',
    'for (x in { x : x, y : y = 42 } = z = {});',
    'for (x in [{x:x, y:y}, [,x,z,]] = z = {});',
    'for (x in [x,y,...z] = z = {});',
    'for (x in [(({ x } = { x: 1 }) => x).a] = z = {});',
    'for (x in [ (foo.bar) ] = z = {});',
    'for (let a = (b in c && d in e); ;);',
    'for (let a = (b in c); ;);',
    'for (let a = (b in c && d); ;);',
    'for (let a = (b in c); ;);',
    'for (var [] in x);',
    'for (var [foo,] in arr);',
    'for (var a = b in c);',
    'for (var [foo,,] in arr);',
    'for (var [,] in x);',
    'for (var [...foo] in obj);',
    'for (var {} in obj);',
    'for (let {x,} in obj);',
    'for (var {x, y} in obj);',
    'for ([a,b] in x) a;',
    'for ({a,b} in x) a;',
    'for (const [...x] in y){}',
    'for (const {...x} in y){}',
    'for ([...{ x = yield }] in [[{}]]) ;',
    'for (var x = 1 in []) {}',
    'for (var [] in {b, y, [.4]: h -= 2e308}) for (; ((this() ? 2e308.m ++ : eval[/B^B=/gim])); (() => class {})(null, ...arguments, ...true, ..."9Â]CÕ")) try {} finally {}',
    'for(`${x in y}`;;);',
    `for (x[a in b] ;;);`,
    `for (a;b;c);`,
    `for (a;b;);`,
    `for (a;;c);`,
    //`for (var i = 0; i < 40000; i++) { src = { ...i, x: -9007199254740991 }; clone = { ...src }; }`,
    `for ([a];;);`,
    'for (a in b) break',
    'for (a().l[4] in b) break',
    'for (class x { [a in b](){} }.x in c);',
    'for (class x { [a](){} }.x in c);',
    'for ((foo = []).bar in {}) {}',
    'for (var {a, b} in c);',
    `for ({x = y} = (z);;) {}`,
    `for (let [foo, bar=b] in arr);`,
    `for (let [foo=a, bar=b] in arr);`,
    `for (let [foo] = arr, bar;;);`,
    'for(b in c in d);',
    'for(var a in 1);',
    'for((let)in 1);',
    'for(a in 1);',
    'for(a in 1,2);',
    'for((let)in b);',
    'for((let.a)in b);',
    'for((let[a])in b);',
    'for((let().a)in b);',
    'for((let``.a)in b);',
    'for((let.a)in b);',
    'for((let).a in b);',
    'for(var a=0 in 1);',

    // ForStatement

    'for(var i=(1 in[]);;);',
    'for(var i=(1 in[]),b,c=(1 in[]);;);',
    'for(var a=(b=>c in 0);;);',
    'for(let;;);',
    'for(let.a;;);',
    'for((let[a]);;);',
    // 'for((let[a]++);;);',
    '!function*(){for((yield a in 0);;);}',
    '!function*(){for((yield*a in 0);;);}',
    'for((1 in[]);;);',
    'for (x of { x : { y = 10 } = {} } = {});',
    'for (x of { x : { foo: y = 10 } = {} } = {});',
    'for (let , x;;);',
    'for (x of { x : { foo: foo().y = 10 } = {} } = {});',
    'for (x of { x : { foo: foo()[y] = 10 } = {} } = {});',
    'for (x of { x : { foo: y.z = 10 } = {} } = {});',
    'for (x of {42 : x} = {});',
    'for (x of {42e-2 : x} = {});',
    'for (x of { z : { __proto__: x, __proto__: y } = z } = {});',
    'for (x of { x : [ y[z] = 10 ] = {} } = {});',
    'for (x of { x : [ y.z = 10 ] = {} } = {});',
    `for ([ a = b = c ] of d) ;`,
    'for (let a = (b in c && d); ;);',
    'for (let a = b => (b in c); ;);',
    'for (let a = ((b in c) && (d in e)); ;);',
    'for (let a = (b && c in d); ;);',
    'for (let [foo, ...bar] of obj);',
    'for ({x, y} of z);',
    'function* g() { for(x of yield) {} }',
    `for (x.y of [23]) {}`,
    `for (yield[g]--;;);`,
    `for (function(){ }[foo] of x);`,
    `for (function(){ if (a in b); }.prop of x);`,
    `for (var [...{ length }] of [[1, 2, 3]]) {}`,
    `for (var [...[...x]] of [[1, 2, 3]]) {}`,
    `function* g() { for(var x of yield) {} }`,
    'for (var [{a = 0}] of []);',
    'for (let [{a = 0}] of []);',
    'for (const [{a = 0}] of []);',
    'for ([...[{a = 0}]] of []);',
    'for (var [...[{a = 0}]] of []);',
    'for (let [...[{a = 0}]] of []);',
    'for (const [...[{a = 0}]] of []);',
    'for ({p: {a = 0}} of []);',
    'for (var {p: {a = 0}} of []);',
    'for (let {p: {a = 0}} of []);',
    'for (x of {"hi" : x} = {});',
    'for (x of {[foo()] : z} = {});',
    'for (x of {[foo()] : (z)} = {});',
    'for (x of {[foo()] : foo().bar} = {});',
    'for (x of {[foo()] : foo()["bar"]} = {});',
    'for (x of {[foo()] : "foo".bar} = {});',
    'for (x of [x,y,...z] = {});',
    'for (x of [x,,...z] = {});',
    'for (x of [((x, y) => z).x] = {});',
    'for (foo().x of ["a", "b", "c"]) {}',
    'for (const {x: a = 0, y: b = 1} of [2, 3]) {}',
    'for (let [a = 0, b = 1] of [2, 3]) {}',
    'for (foo().x of []) { for (foo().x of []) { var p = foo().x; } }',
    'for ([{a}] in {}) {}',
    'for ([{a}] of []) {}',
    `for (let [x] in y);`,
    `for (let {x} of y);`,
    `for (let x of y);`,
    'for (let [var1, var2] of [[1, 1], [2, 2]]) { }',
    `for (let foo in bar) { let foo = 1; }`,
    'for ([a, ...b] in {}) {}',
    `for ({a: b.c}.foo of d) e`,
    `for (foo=10;;);`,
    `for ({x, y} of [{x: 1, y: 2}]) {}`,
    `for ([ x = yield ] of [[]]) {}`,
    `for (j of x) { var [[foo]=[42]] = [] }`,
    `for (j of x) { [[foo]=[42]] = [] }`,
    'for(1*(1 in[]);;);',
    'for(1*(1+1 in[]);;);',
    'for(1*(1+1 in[]);;);',
    'for(1*(1+(1 in[]));;);',
    `for (let i = 0, {length} = list; i < length; i++) {}
    for (; ; ) {}
    for (function () {
      const i = 0;
    }; ; ) {}
    for (() => {
      const i = 0;
    }; ; ) {}`,

    // IfStatement
    'if(a);',
    'if(a)b',
    'if(a)if(a)b',
    'if(a){}',
    'if(a);else;',
    'if(a);else{}',
    'if(a){}else{}',
    'if(a)if(a){}else{}else{}',
    'if(a){if(a);}else;',
    'if(a){a:if(a);}else;',
    'if(a){if(a);else if(a);}else;',
    'if(a){while(a)if(a);}else;',
    'if(a){with(a)if(a);}else;',
    'if(a){for(;;)if(a);}else;',
    'if(a){for(a in a)if(a);}else;',
    `if(1)/  foo/`,
    `if (foo) a; if (bar) b; else c;`,
    `if (a > 2) {b = c }`,
    'if (true) { function f1() {} } function foo() { f1; }',
    'if (true) { function f1() {} function f2() { f1(); } }',
    `if(foo) a = b;`,
    `if (a) function a(){}`,
    `if (a) b()`,
    'if (++a);',
    'if (a) --a;',
    'if (--n == 0) {}',
    `if (1) { eval(42) }`,
    'if (x) y(); else z()',
    'if (true) that(); else;',
    `if (true) if (false) {} else ; else {}`,

    // LabeledStatement
    'a:;',
    'a:b:;',

    // ReturnStatement

    'function a(){return}',
    'function a(){return 0}',
    'function a(){return function a(){return 0}}',
    `(a, b) => {return}`,
    `function f(){   return 15;    }`,
    `function f(){   {return}    }`,

    // SwitchStatement

    'switch(0){}',
    'switch(0){default:}',
    'switch(0){case 0:default:}',
    'switch(0){case 0:a;default:c:b}',
    'switch(x) { case y: a }',
    'switch(x) { case y: x(foo) }',
    'switch(x) { case y: foo=b; }',
    'switch(null) {}',
    'switch(null) { default: case foo: let x = y; }',
    `switch (X) {}`,
    /*  `{
      let result;
      let x = 1;
      switch (x) {
        case 1:
          let x = 2;
          result = x;
          break;
        default:
          result = 0;
          break;
      }
    }`,*/

    // ThrowStatement

    'throw 0',
    'throw(1<1)+1',

    // TryStatement

    'try{}catch(a){}',
    // 'try{}catch(a){}finally{}',
    'try{}finally{}',
    'try {} catch (x) { try {} catch (x) {} }',
    'try {} catch (x) { try {} catch (y) { let x } }',
    'try {} catch (foo) { for (var foo = 1;;); }',
    'try {} catch (foo) { for (var foo in bar); }',
    'try {} catch (e) { for (var e = 1;;) {} }',
    `try {} catch(e){}`,
    `try {} catch({e}){}`,
    `try {} catch([e]){}`,
    `try {} catch({e=x}){}`,
    // `try {} catch {} finally {}`,
    `try{}catch(a){}`,
    `try { } catch (eval) { }`,
    `try { } catch (e) { say(e) }`,
    `try { } catch ([a = 0]) { }`,
    `try { } catch (e) { let a; }`,
    'try { throw [,]; } catch ([x = 23]) {}',
    `try { throw [1, 2, 3]; } catch ([...x]) {}`,
    // `try {try { let e; } catch { let e; } finally { let e; }} catch (e) { }`,
    `function __f_3() { try { __f_3(); } catch(e) { eval("let fun = ({a} = {a: 30}) => {"); } }`,

    // VariableDeclarationStatement
    'var a=0',
    'var a=0,b=0',
    'var a=(0,0)',
    'var a=(0,0,0)',
    'var a',
    'var a,b',
    'var a=""in{}',

    // WhileStatement

    'while(0);',
    'while(0)while(0);',
    'while (/["-{-]/gmuy[true] >>>= (((2e308)))) {}',
    'while(x=y) { function a() {} }',
    //'while (x < 10) { x++; y--; }',
    'while(x=y) { async function *a() {} }',
    'while(x=y) { async function *a() {} }',
    'while(x=y) { async function *a() { yield foo; await x;} }',
    'while(x=y) { a/b}',
    'while(x=y) { (x)(y)}',
    'while(x=y) { ++x; }',

    // WithStatement

    'with(null);',
    'with({}) {}',
    // 'with([x=y]) {}',
    // 'with([x=y/(x)]) {}',
    'with({...b/c}) {}'
  ]) {
    it(`${arg}`, () => {
      //    console.log(generate(parseScript(`${arg}`)));
      t.doesNotThrow(() => {
        parseScript(generate(parseScript(`${arg}`)));
      });
    });
  }
});
